"""
本代码用于Python的零基础学习
"""

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#  list(列表) tuple(元组) str(字符串) set(集合) dict(字典)  # # # # # # # # # # # # # # # # # # #  ###
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

# 容器 #################################################################################################################
#----------------------------------------------------------------------------------------------------------------------
# 定义：可以容纳多份数据的数据类型，每一份数据称之为一个元素，每一个元素可以是任意类型的数据
# 具体指：list(列表)，tuple(元组)，str(字符串)，set(集合)，dict(字典)
# 是否支持下标索引：
#   支持：列表，元组，字符串  --序列类型
#   不支持：集合，字典  --非序列类型
# 是否支持重复元素：
#   支持：列表，元组，字符串  --序列类型
#   不支持：集合，字典  --非序列类型
# 是否可以修改：
#   支持：列表，集合，字典
#   不支持：元组，字符串
# 是否支持嵌套：
#   支持：列表，元组，字典
#   不支持：字符串，集合
#-----------------------------------------------------------------------------------------------------------------------
# 列表：适合可修改，可重复的一批数据的记录场景
# 元组：适合不可修改，可重复的一批数据的记录场景
# 字符串：一串字符的记录场景
# 集合：不可重复的数据的记录场景
# 字典：以key检索value值的数据的记录场景
#-----------------------------------------------------------------------------------------------------------------------
# 容器的通用操作：
# 类型转换：list(容器)； str(容器)； tuple(容器)； set(容器)
# 数学函数：len()； max()； min()； sorted(序列，[reverse=True]): 排序，reverse=True表示降序，得到一个排好序的列表
#-----------------------------------------------------------------------------------------------------------------------

# list(列表) ###########################################################################################################
#-----------------------------------------------------------------------------------------------------------------------
# 语法：[元素, 元素, ...]
# 列表可以存储的多个元素(上限为2^63-1,约922亿)，且多个元素可以为不同类型，允许重复数据存在
# 列表也可以作为元素，此时列表称为嵌套列表
# 列表中元素可以通过下标索引访问，支持正向索引与反向索引：正向索引从0开始，依次递增，从左至右；反向索引从-1开始，依次递减，从右至左
# 如果列表是嵌套列表，则需两层索引，第一层索引表示第几个列表(元素)，第二层索引表示该列表(元素)的第几个元素
# 如果列表是嵌套列表，也可以一层索引，此时将表示第几个列表
#-----------------------------------------------------------------------------------------------------------------------
# 定义空列表
zero_list_0 = []
zero_list_1 = list()
# 定义一个列表
name_list_0 = ["张三", "李四", "王二麻子"]
name_list_1 = ["张三", "roger", 666, True]
# 嵌套列表
nest_list_0 = [[1, 187, 62], ["roger", True]]
# 打印
print(zero_list_0, name_list_0, name_list_1, nest_list_0)
print(type(zero_list_0), type(name_list_0), type(name_list_1), type(nest_list_0))
print(f"列表第一个元素(正向索引)：{name_list_0[0]}, 列表第一个元素(反向索引)：{name_list_0[-3]}")
print(f"嵌套列表第一个元素(正向索引)：{nest_list_0[1][1]}")

# list(列表)的方法 ------------------------------------------------------------------------------------------------------
# 插入元素：列表.insert(下标，元素)
# 删除元素：方式一：del 列表[下标]；方式二：列表.pop(下标)，且方式二可以将取出的元素赋给一个新变量
# 追加元素：方式一：列表.append(元素)；方式二：列表.extend(其他数据容器)，将其他数据容器的内容取出，依次追加到列表尾部
# 清空列表：列表.clear()
# 修改元素：列表[下标] = 值
# 统计列表长度：len(列表)
# 统计某元素个数：列表.count(元素)
# 查询某元素下标：列表.index(元素)  # 只返回第一个元素的下标
# 删除列表某元素：列表.remove(元素) # 只删除找到的第一个元素
#-----------------------------------------------------------------------------------------------------------------------
func_list_0 = ["张三", 172, True]
index = func_list_0.index("张三")
print(index)
func_list_0[1] = 173
print(func_list_0)
func_list_0.insert(2, False)
print(func_list_0)
func_list_0.append("马羊")
func_list_0.append(["卤蛋", 222])
func_list_0.extend(["卤蛋", 222])
func_list_0.extend(["阿玮", "阿玮"])
print(func_list_0)
del func_list_0[2]
del func_list_0[4][1]
print(func_list_0)
func_list_0.pop(6)
element = func_list_0.pop(5)
# func_list_0.pop([4][1])   # 该方法不允许
print(func_list_0)
func_list_0.remove("阿玮")
print(func_list_0)

# list(列表)的遍历-------------------------------------------------------------------------------------------------------
# for循环更简单，while更灵活
#-----------------------------------------------------------------------------------------------------------------------
loop_list = [1, 2, 3, 4, 5]
index = 0
while index < len(loop_list):
    element = loop_list[index]
    print(f"列表元素有：{element}")
    index += 1
for element in loop_list:
    print(f"列表元素有：{element}")

# tuple(元组) ##########################################################################################################
#-----------------------------------------------------------------------------------------------------------------------
# 语法： (元素, 元素, ...)
# 元组与列表类似，唯一不同在于元组不可修改
#-----------------------------------------------------------------------------------------------------------------------
# 定义空元组
zero_tuple_0 = ()
zero_tuple_1 = tuple()
# 定义一个元组
sta_tuple_0 = (1, "haha", True)
print(f"{sta_tuple_0}, {type(sta_tuple_0)}")
# 定义只有一个元素的元组，要在数据后面添加逗号，否则会被认为是别的类型变量
one_tuple_0 = ("hahah")
one_tuple_1 = ("haha",)
print(f"{one_tuple_0}, {type(one_tuple_0)}")    # 比如，此时该变量不是元组，而被当成了一个字符串
print(f"{one_tuple_1}, {type(one_tuple_1)}")
# 元组支持嵌套
nest_tuple_0 = ((1, 2, 3), ("haha", True, 5))
print(nest_tuple_0)
# 通过下标索引取出内容(与列表语法相同)
num = nest_tuple_0[0][2]
print(num)

# tuple(元组)的方法 -----------------------------------------------------------------------------------------------------
# 查询某元素下标：元组.index(元素)
# 统计某元素个数：元组.count(元素)
# 统计元组长度：len(元组)
#-----------------------------------------------------------------------------------------------------------------------
# 元组内若某个元素为list，则list的内容可以修改，并且该列表具备列表的所有方法
nest_tuple_1 = (1, 2, ["haha", True, 4])
nest_tuple_1[2][1] = False
print(nest_tuple_1)
nest_tuple_1[2].remove("haha")
nest_tuple_1[2].append("lala")
print(nest_tuple_1)

# string(字符串) ########################################################################################################
#-----------------------------------------------------------------------------------------------------------------------
# 字符串虽然简单，但是也是属于容器
# 字符串支持下标索引取值，方法与列表同：字符串[索引]
# 字符串与元组性质一样，无法修改，除非定义一个新的字符串
# 查找特定字符串的下标索引值：字符串.index(字符串内容)
# 替换字符串中所有的某个内容为另一个内容，该方法将得到一个新的字符串：字符串.replace(内容一, 内容二)
# 按照指定的分隔符字符串，将字符串划分为多个字符串，并存入列表对象中，该方法将得到一个新的字符串：字符串.split(分隔符字符串)
# 统计字符串中某字符串的出现次数：变量 = 字符串.count(字符串)
# 统计字符串的长度：len(字符串)
# 支持for和while循环进行遍历
#-----------------------------------------------------------------------------------------------------------------------
sam_string_0 = "华中科技大学 机械科学与工程学院"   # 空格也在索引内
print(sam_string_0[0], sam_string_0[6])        # 下标索引取值
print(sam_string_0.index("科技"))              # 返回“科”字所在下标索引
new_string_0 = sam_string_0.replace("学", "不学")  # 将替换所有的“学”为“不学”
print(new_string_0)
new_string_1 = sam_string_0.split(" ")                          # 按照空格对字符串进行分割
print(new_string_1)
print(sam_string_0.count("学"))                                 # 返回字符串中“学”的个数
print(len(sam_string_0))                                        # 返回字符串长度，包括空格

# 序列切片 --------------------------------------------------------------------------------------------------------------
# 列表，元组，字符串均称为序列，为有序的，支持下标索引的一类数据容器
# 序列切片：变量 = 序列[起始下标:结束下标:步长]
# 步长为负数时，起始下标和结束下标也要采用反向标识，比如[::-1]其实是等同于将系列反转了；[3:1:-1]从下标3开始，到下标1结束
#-----------------------------------------------------------------------------------------------------------------------
# 对list进行切片
my_list = [0, 1, 2, 3, 4, 5, 6]
result_list = my_list[1:4]  # 步长默认为1，可以省略不写
print(result_list)
# 对tuple进行切片
my_tuple = (0, 1, 2, 3, 4, 5, 6)
result_tuple = my_tuple[:]  # 起始和结束不写表示从头到尾，步长为1可以省略
print(result_tuple)
# 对string进行切片
my_string = "0123456"
result_string = my_string[::2]
print(result_string)

# 值得注意的是，其实切片方式可以写在一起，如下所示：
my_str = "万过薪月，员序程马黑来，nohtyP学"
# 倒序字符串，切片取出
result1 = my_str[::-1][9:14]
print(result1)
# 切片取出，然后倒序
result2 = my_str[5:10][::-1]
print(result2)
# split分隔“，” replace替换“来”为空，倒序字符串
result3 = my_str.split("，")[1].replace("来", " ")[::-1].strip()  # split后为列表，[1]后得到字符串，字符串又可以继续使用replace进行替换
print(result3)

# set(集合) ############################################################################################################
#-----------------------------------------------------------------------------------------------------------------------
# 集合中内容不可重复，无序，但可修改
# 语法：变量 = {元素, 元素, ...}
# 添加新元素：集合.add(元素)
# 移除某元素：集合.remove(元素)
# 从集合中随机取出元素(集合本身同时被修改)：集合.pop()
# 清空集合：集合.clear()
# 取两个集合的差集(集合1有，而集合2没有，得到新集合，集合1和2保持不变)：集合1.difference(集合2)
# 消除两个集合的差集(在集合1内，删除和集合2相同的元素，集合1被改变)：集合1.difference_update(集合2)
# 将集合1和集合2组合成新集合(得到新集合，集合1和集合2不变)：集合1.union(集合2)
# 统计集合元素数量：len()
#-----------------------------------------------------------------------------------------------------------------------
# 定义空集合
zero_set = set()
# 定义一个集合
stad_set = {"haha", "haha", True, True, 12}
print(stad_set, type(stad_set))
# 添加新元素到集合
stad_set.add("卤蛋")
print(stad_set, type(stad_set))
# 移除集合中某元素
stad_set.remove(True)
print(stad_set, type(stad_set))
# 从集合中随机取出元素
element_set = stad_set.pop()
print(element_set)
# 清空集合
stad_set.clear()
# 取两个集合的差集
set_0 = {1, 2, 3}
set_1 = {1, 4, 5}
set_2 = set_0.difference(set_1)
print(set_2)
# 消除两个集合的差集
set_0.difference_update(set_1)
print(set_0)
# 两个集合合并
set_3 = set_0.union(set_1)
print(set_3)
# 统计集合元素数量
print(len(set_3))
# 集合的遍历(集合不支持下标索引，所以不能用while遍历，但是可以用for)
for element in set_3:
    print(element)

# dict(字典) ###########################################################################################################
#-----------------------------------------------------------------------------------------------------------------------
# 语法：变量 = {key: value, key: value, ..., key:value}
# 字典中的key不允许重复，若重复定义，则新key对应的value值将会覆盖掉之前的value值
# 字典不支持下标索引，但是可以通过key值来取得对应的value值：字典[key]
# key和value可以是任意数据类型，但是key不可为字典，即字典也支持嵌套，但是嵌套规则为value可以为字典
#-----------------------------------------------------------------------------------------------------------------------
# 定义空字典
zero_dict_0 = {}
zero_dict_1 = dict()
print(zero_dict_0, type(zero_dict_0))
# 定义一个字典
stad_dict = {"阿玮": 99, "卤蛋": -99, "马羊": 60, "嘉哥": 100}
print(stad_dict, type(stad_dict))
# 通过key值取出字典中对应的value值
print(stad_dict["阿玮"], stad_dict["卤蛋"])
# 字典嵌套
nest_dict_0 = {
    "阿玮": {"语文": 77, "数学": 66, "英语": 33},
    "卤蛋": {"语文": 88, "数学": 86, "英语": 55},
    "马羊": {"语文": 99, "数学": 96, "英语": 66},
}
# 从嵌套字典中获得数据
print(nest_dict_0["阿玮"]["数学"])

# dict(字典)的常用操作 ---------------------------------------------------------------------------------------------------
# 新增元素：字典[key] = value
# 更新元素：字典[key] = value (语法与新增元素相同，因为字典的key不可以重复，所以对已经存在的key执行上述操作，就是更新value值)
# 删除元素：字典.pop(key) (将获得指定key的value，同时字典被修改，指定key的数据被删除)
# 清空字典：字典.clear()
# 得到字典中全部的key：字典.keys()
# 统计字典中元素数量：len(字典)
#-----------------------------------------------------------------------------------------------------------------------
# 新增元素/更新元素
nest_dict_0["嘉哥"] = {"语文": 100, "数学": 101, "英语": 102}
nest_dict_0["阿玮"] = {"语文": -77, "数学": -66, "英语": -33}
nest_dict_0["阿玮"]["语文"] = 150
print(nest_dict_0)
# 删除元素
stad_dict.pop("嘉哥")
print(stad_dict)
# 清空字典
stad_dict.clear()
# 得到字典中全部的key
nest_keys = nest_dict_0.keys()
print(nest_keys, type(nest_keys))
# 遍历字典
# 方法一：通过keys进行遍历
for key in nest_keys:
    print(f"字典中{key}的value为：{nest_dict_0[key]}")
# 方法二：直接对字典进行遍历，将返回字典中的key值
for key in nest_dict_0:
    print(f"字典中{key}的value为：{nest_dict_0[key]}")
# 统计字典中元素数量
print(len(nest_dict_0))

# dict(字典)的课后练习 ---------------------------------------------------------------------------------------------------
nest_dict_test = {
    "王力宏": {"部门": "科技部", "工资": 3000, "级别": 1},
    "周杰伦": {"部门": "市场部", "工资": 5000, "级别": 2},
    "林俊杰": {"部门": "市场部", "工资": 7000, "级别": 3},
    "张学友": {"部门": "科技部", "工资": 4000, "级别": 1},
    "刘德华": {"部门": "市场部", "工资": 6000, "级别": 2},
}
print(f"全体员工当前信息如下：\n {nest_dict_test}")
for key in nest_dict_test:
    if nest_dict_test[key]["级别"] == 1:
        nest_dict_test[key]["级别"] += 1
        nest_dict_test[key]["工资"] += 1000
print(f"全体员工级别为1的员工完成升值加薪操作，操作后：\n {nest_dict_test}")
#-----------------------------------------------------------------------------------------------------------------------

